/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a user */
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/limit/{limit}/offset/{offset}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all users */
        get: operations["UsersController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a user */
        get: operations["UsersController_findOne"];
        put?: never;
        post?: never;
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all profiles */
        get: operations["ProfileController_findAll"];
        put?: never;
        /** Create a profile */
        post: operations["ProfileController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a profile */
        get: operations["ProfileController_findOne"];
        put?: never;
        post?: never;
        delete: operations["ProfileController_remove"];
        options?: never;
        head?: never;
        patch: operations["ProfileController_update"];
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all events */
        get: operations["EventsController_findAll"];
        put?: never;
        /** Create an event */
        post: operations["EventsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return an event */
        get: operations["EventsController_findOne"];
        put?: never;
        post?: never;
        delete: operations["EventsController_remove"];
        options?: never;
        head?: never;
        patch: operations["EventsController_update"];
        trace?: never;
    };
    "/events/end/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** End an event */
        post: operations["EventsController_endEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/user-events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EventsController_getMyEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all roles */
        get: operations["RolesController_findAll"];
        put?: never;
        post: operations["RolesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RolesController_findOne"];
        put?: never;
        post?: never;
        delete: operations["RolesController_remove"];
        options?: never;
        head?: never;
        patch: operations["RolesController_update"];
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all files */
        get: operations["FilesController_findAll"];
        put?: never;
        /** Create a file register in database */
        post: operations["FilesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/status/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the status of a file */
        get: operations["FilesController_getStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Queue file to save on disk */
        post: operations["FilesController_uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FilesController_findAllByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FilesController_findOne"];
        put?: never;
        post?: never;
        delete: operations["FilesController_remove"];
        options?: never;
        head?: never;
        patch: operations["FilesController_update"];
        trace?: never;
    };
    "/files/download/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download a file */
        get: operations["FilesController_getFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/presences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all presences */
        get: operations["PresencesController_findAll"];
        put?: never;
        /** Create a presence */
        post: operations["PresencesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/presences/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a presence */
        get: operations["PresencesController_findOne"];
        put?: never;
        post?: never;
        delete: operations["PresencesController_remove"];
        options?: never;
        head?: never;
        patch: operations["PresencesController_update"];
        trace?: never;
    };
    "/presences/event/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all presences for event */
        get: operations["PresencesController_findAllByEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/presences/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all presences for user */
        get: operations["PresencesController_findAllByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tcc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all TCCs */
        get: operations["TccController_findAll"];
        put?: never;
        /** Create a new TCC */
        post: operations["TccController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tcc/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TccController_findOne"];
        put?: never;
        post?: never;
        delete: operations["TccController_remove"];
        options?: never;
        head?: never;
        patch: operations["TccController_update"];
        trace?: never;
    };
    "/tcc-presentations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all TCC Presentations */
        get: operations["TccPresentationsController_findAll"];
        put?: never;
        post: operations["TccPresentationsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tcc-presentations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TccPresentationsController_findOne"];
        put?: never;
        post?: never;
        delete: operations["TccPresentationsController_remove"];
        options?: never;
        head?: never;
        patch: operations["TccPresentationsController_update"];
        trace?: never;
    };
    "/tcc-students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all TCC Students */
        get: operations["TccStudentsController_findAll"];
        put?: never;
        /** Create a TCC Student */
        post: operations["TccStudentsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tcc-students/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TccStudentsController_findOne"];
        put?: never;
        post?: never;
        delete: operations["TccStudentsController_remove"];
        options?: never;
        head?: never;
        patch: operations["TccStudentsController_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserDto: {
            email: string;
            password: string;
            full_name: string;
            enrollment: string;
            profileId: string;
        };
        User: {
            /**
             * @description User ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description Full name of the user
             * @example Jonh Doe
             */
            full_name: string;
            /**
             * @description User email
             * @example email@cefe-rj.br
             */
            email: string;
            /**
             * @description enrollment
             * @example 2020111SINF
             */
            enrollment: string;
            /**
             * @description Profile ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            profile_id: string;
            /**
             * Format: date-time
             * @description Date and time of user creation
             * @example 2021-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time of user update
             * @example 2021-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        CreateUserResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: components["schemas"]["User"];
        };
        Api500ResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response data */
            data: Record<string, never>;
            /** @description Response success status */
            success: boolean;
            /**
             * @description Error message
             * @example Internal server error
             */
            error: string;
        };
        GetAllUsersResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                users?: components["schemas"]["User"][];
            };
        };
        UpdateUserDto: Record<string, never>;
        CreateProfileDto: {
            name: string;
        };
        Profile: {
            /**
             * @description Profile ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description Profile name
             * @example admin
             */
            name: string;
            /**
             * Format: date-time
             * @description Created at
             * @example 2021-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Updated at
             * @example 2021-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        GetAllProfilesResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                profiles?: components["schemas"]["Profile"][];
            };
        };
        UpdateProfileDto: Record<string, never>;
        CreateEventDto: {
            /** @example Event 1 */
            name: string;
            /**
             * @description Event start date
             * @example 2024-12-14T10:00:00Z
             */
            eventStartDate: string;
            /**
             * @description Event end date
             * @example 2024-12-17T10:00:00Z
             */
            eventEndDate: string;
            /**
             * @description Status of the event
             * @example upcoming
             */
            status: string;
        };
        Event: {
            /**
             * @description Unique identifier of the event
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description Name of the event
             * @example Event 1
             */
            name: string;
            /**
             * Format: date-time
             * @description Date of the event
             * @example 2021-01-01 00:00:00
             */
            start_at: string;
            /**
             * Format: date-time
             * @description Date of the event end
             * @example 2021-01-01 23:59:59
             */
            end_at: string;
            /**
             * @description Event status
             * @example upcoming
             */
            status: string;
            /**
             * Format: date-time
             * @description Date that the event was created
             * @example 2021-01-01
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Event update information
             * @example 2021-01-01
             */
            updated_at: string;

            /**
             * @description User ID that created the event
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            created_by_user_id: string;

            user: {
                id: string,
                full_name: string,
            };
        };
        GetAllEventsResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                events?: components["schemas"]["Event"][];
            };
        };
        GetEventResponseDataDto: {
            event: components["schemas"]["Event"];
            isStarted: boolean;
            isEnded: boolean;
        };
        GetEventResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: components["schemas"]["GetEventResponseDataDto"];
        };
        UpdateEventDto: Record<string, never>;
        EndEventResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            /** @example {
             *       "message": "Event ended"
             *     } */
            data: {
                message?: string;
            };
        };
        CreateRoleDto: {
            name: string;
        };
        GetAllRolesResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                roles?: components["schemas"]["Role"][];
            };
        };
        UpdateRoleDto: Record<string, never>;
        CreateFileDto: {
            name: string;
            type: string;
            eventId: string;
        };
        CreateFileResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                file?: {
                    id?: string;
                    name?: string;
                    user_id?: string;
                    event_id?: string;
                    /** @enum {unknown} */
                    type?: "image" | "document" | "certificate";
                    /** @enum {unknown} */
                    status?: "waiting" | "processing" | "done" | "error";
                };
                message?: string;
            };
        };
        GetFileStatusResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            /** @example {
             *       "id": "550e8400-e29b-41d4-a716-446655440000",
             *       "status": "pending"
             *     } */
            data: {
                id?: string;
                status?: string;
            };
        };
        UploadFileDto: {
            /** Format: binary */
            file: string;
        };
        DownloadFileResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                /** @example File downloaded successfully */
                message?: string;
            };
        };
        GetAllFilesResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                files?: components["schemas"]["File"][];
            };
        };
        GetFileResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                file?: {
                    id?: string;
                    name?: string;
                    user_id?: string;
                    event_id?: string;
                    /** @enum {unknown} */
                    type?: "image" | "document" | "certificate";
                    /** @enum {unknown} */
                    status?: "waiting" | "processing" | "done" | "error";
                };
            };
        };
        UpdateFileDto: Record<string, never>;
        CreatePresenceDto: {
            event_id: string;
        };
        Presence: {
            /**
             * @description Profile ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description User ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            user_id: string;
            /**
             * @description Event ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            event_id: string;
            /**
             * Format: date-time
             * @description Created at
             * @example 2021-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Updated at
             * @example 2021-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        GetAllPresencesResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                presences?: components["schemas"]["Presence"][];
            };
        };
        GetPresenceResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                presence?: {
                    id?: string;
                    userId?: string;
                    eventId?: string;
                    isPresent?: boolean;
                    createdAt?: string;
                    updatedAt?: string;
                };
            };
        };
        UpdatePresenceDto: Record<string, never>;
        GetAllPresencesByEventResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                presences?: components["schemas"]["Presence"][];
            };
        };
        GetAllPresencesByUserResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                presences?: components["schemas"]["Presence"][];
            };
        };
        SignInAuthDto: {
            email: string;
            password: string;
        };
        AccessTokenResponseDto: {
            /** @example some-jwt-token */
            access_token: string;
        };
        ApiResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response data */
            data: Record<string, never>;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
        };
        SignUpAuthDto: {
            email: string;
            password: string;
            fullName: string;
            enrollment: string;
            profileId?: string;
        };
        ChangePasswordDto: {
            oldPassword: string;
            newPassword: string;
        };
        CreateTccDto: Record<string, never>;
        GetAllTccResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                tccs?: components["schemas"]["Tcc"][];
            };
        };
        UpdateTccDto: Record<string, never>;
        CreateTccPresentationDto: Record<string, never>;
        GetAllTccPresentationsResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: components["schemas"]["TccPresentation"][];
        };
        UpdateTccPresentationDto: Record<string, never>;
        CreateTccStudentDto: {
            students: string[];
            tccId: string;
        };
        GetAllTccStudentsResponseDto: {
            /** @description HTTP status code */
            status: number;
            /** @description Response success status */
            success: boolean;
            /** @description Error */
            error: Record<string, never>;
            data: {
                tccStudents?: components["schemas"]["TccStudents"][];
            };
        };
        UpdateTccStudentDto: {
            students?: string[];
            tccId?: string;
        };
        Role: {
            /**
             * @description Unique identifier
             * @example d290f1ee-6c54-4b01-90e6-d701748f0851
             */
            id: string;
            /**
             * @description Role name
             * @example VIEW_ANY
             */
            name: string;
            /**
             * Format: date-time
             * @description Date of creation
             * @example 2021-09-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date of last update
             * @example 2021-09-01T00:00:00.000Z
             */
            updated_at: string;
        };
        Tcc: {
            /**
             * @description TCC ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description TCC title
             * @example Title
             */
            theme: string;
            /**
             * @description Advisor ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            advisor_id: string;
            /**
             * Format: date-time
             * @description Created at
             * @example 2021-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Updated at
             * @example 2021-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        TccPresentation: {
            /**
             * @description TCC Presentation ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description TCC ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            tcc_id: string;
            /**
             * @description Presentation type
             * @example first
             */
            type: string;
            /**
             * Format: date-time
             * @description Presentation date
             * @example 2021-01-01T00:00:00.000Z
             */
            date: string;
            /**
             * Format: date-time
             * @description Created at
             * @example 2021-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Updated at
             * @example 2021-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        TccStudents: {
            /**
             * @description TCC Student ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * @description TCC ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            tcc_id: string;
            /**
             * @description Student ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            student_id: string;
            /**
             * Format: date-time
             * @description Created at
             * @example 2021-01-01T00:00:00.000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Updated at
             * @example 2021-01-01T00:00:00.000Z
             */
            updated_at: string;
        };
        File: {
            /** @example f6a6c5b2-4b9b-4f8f-8f5f-5d5f5f5f5f5f */
            id: string;
            /** @example file.txt */
            name: string;
            /** @example https://www.example.com/file.txt */
            path: string;
            /** @example image */
            type: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            user_id: string;
            /** @example 550e8400-e29b-41d4-a716-446655440000 */
            event_id: string;
            /** @example waiting */
            status: string;
            created_at: string;
            user: {
                id: string,
                full_name: string,
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description The record created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateUserResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Api500ResponseDto"];
                };
            };
        };
    };
    UsersController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                limit: number;
                offset: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllUsersResponseDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Api500ResponseDto"];
                };
            };
        };
    };
    UsersController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Api500ResponseDto"];
                };
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProfileController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all profiles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllProfilesResponseDto"];
                };
            };
        };
    };
    ProfileController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProfileDto"];
            };
        };
        responses: {
            /** @description The record created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
        };
    };
    ProfileController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The profile found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
        };
    };
    ProfileController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProfileController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventsController_findAll: {
        parameters: {
            query: {
                offset: number;
                limit: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllEventsResponseDto"];
                };
            };
        };
    };
    EventsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEventDto"];
            };
        };
        responses: {
            /** @description Create an event */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
        };
    };
    EventsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return an event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEventResponseDto"];
                };
            };
        };
    };
    EventsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEventDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventsController_endEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description End an event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EndEventResponseDto"];
                };
            };
        };
    };
    EventsController_getMyEvents: {
        parameters: {
            query: {
                offset: number;
                limit: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all roles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllRolesResponseDto"];
                };
            };
        };
    };
    RolesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoleDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FilesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all files */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllFilesResponseDto"];
                };
            };
        };
    };
    FilesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFileDto"];
            };
        };
        responses: {
            /** @description The record created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateFileResponseDto"];
                };
            };
        };
    };
    FilesController_getStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return the status of a file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFileStatusResponseDto"];
                };
            };
        };
    };
    FilesController_uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description File to upload */
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadFileDto"];
            };
        };
        responses: {
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadFileResponseDto"];
                };
            };
        };
    };
    FilesController_findAllByUser: {
        parameters: {
            query: {
                limit: number;
                offset: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FilesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFileResponseDto"];
                };
            };
        };
    };
    FilesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FilesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFileDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FilesController_getFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return the file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadFileResponseDto"];
                };
            };
        };
    };
    PresencesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all presences */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllPresencesResponseDto"];
                };
            };
        };
    };
    PresencesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePresenceDto"];
            };
        };
        responses: {
            /** @description Create a presence */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Presence"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    PresencesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a presence */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPresenceResponseDto"];
                };
            };
        };
    };
    PresencesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PresencesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePresenceDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PresencesController_findAllByEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all presences for event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllPresencesByEventResponseDto"];
                };
            };
        };
    };
    PresencesController_findAllByUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all presences for user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllPresencesByUserResponseDto"];
                };
            };
        };
    };
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInAuthDto"];
            };
        };
        responses: {
            /** @description Sign in */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponseDto"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseDto"];
                };
            };
        };
    };
    AuthController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpAuthDto"];
            };
        };
        responses: {
            /** @description Sign up */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponseDto"];
                };
            };
        };
    };
    AuthController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordDto"];
            };
        };
        responses: {
            /** @description Change password */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all TCCs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllTccResponseDto"];
                };
            };
        };
    };
    TccController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTccDto"];
            };
        };
        responses: {
            /** @description Create a new TCC */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTccDto"];
                };
            };
        };
    };
    TccController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTccDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccPresentationsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all TCC Presentations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllTccPresentationsResponseDto"];
                };
            };
        };
    };
    TccPresentationsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTccPresentationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccPresentationsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccPresentationsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccPresentationsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTccPresentationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccStudentsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all TCC Students */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllTccStudentsResponseDto"];
                };
            };
        };
    };
    TccStudentsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTccStudentDto"];
            };
        };
        responses: {
            /** @description The record created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseDto"];
                };
            };
        };
    };
    TccStudentsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccStudentsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TccStudentsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTccStudentDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
